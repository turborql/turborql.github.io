<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>集合之HashMap</title>
    <url>/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/</url>
    <content><![CDATA[<p>集合啦</p>
<a id="more"></a>
<h3 id="一、初识HashMap"><a href="#一、初识HashMap" class="headerlink" title="一、初识HashMap"></a>一、初识HashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></figure>


<h5 id="1、当创建HashMap集合对象的时候"><a href="#1、当创建HashMap集合对象的时候" class="headerlink" title="1、当创建HashMap集合对象的时候"></a>1、当创建HashMap集合对象的时候</h5><ul>
<li>jdk8之前，在==构造方法==中创建一个个长度是16的Entry[] table用来存储键值对数据的。</li>
<li>jdk8之后，在==第一次调用put方法==的时候创建数组，Node[] table用来存储键值对数据的。</li>
</ul>
<h5 id="2、HashMap底层如何计算出索引值"><a href="#2、HashMap底层如何计算出索引值" class="headerlink" title="2、HashMap底层如何计算出索引值"></a>2、HashMap底层如何计算出索引值</h5><p>底层采用key的hashCode（）方法的值  +  数组长度  ==》进行无符号右移，按位异或，按位与计算出索引。除了位运算，还有平方取中，取余数，伪随机数法，但是位运算的效率最高。</p>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/38.png" class>



<h5 id="3、什么时候变成红黑树？"><a href="#3、什么时候变成红黑树？" class="headerlink" title="3、什么时候变成红黑树？"></a>3、什么时候变成红黑树？</h5><p>节点长度及链表长度大于8，且数组长度大于64时，将链表变为红黑树。</p>
<h5 id="4、在hashMap中如何解决hash冲突的"><a href="#4、在hashMap中如何解决hash冲突的" class="headerlink" title="4、在hashMap中如何解决hash冲突的"></a>4、在hashMap中如何解决hash冲突的</h5><p>拉链法</p>
<h3 id="二、HashMap继承关系"><a href="#二、HashMap继承关系" class="headerlink" title="二、HashMap继承关系"></a>二、HashMap继承关系</h3><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/40.png" class>

<h3 id="三、HashMap的成员变量"><a href="#三、HashMap的成员变量" class="headerlink" title="三、HashMap的成员变量"></a>三、HashMap的成员变量</h3><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/53.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/47.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/48.png" class>

<h5 id="a-loadFactor"><a href="#a-loadFactor" class="headerlink" title=":a: loadFactor"></a>:a: loadFactor</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/58.png" class>

<h5 id="b-集合的初始化容量–必须是2的n次幂"><a href="#b-集合的初始化容量–必须是2的n次幂" class="headerlink" title=":b:  集合的初始化容量–必须是2的n次幂"></a>:b:  集合的初始化容量–必须是2的n次幂</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> *默认的初始化容量是16---1&lt;&lt;4相当于1*2的4次方也就是16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>==<strong>1、为什么必须是2的n次幂？</strong>==</p>
</blockquote>
<p>数组长度是2的n次幂</p>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/41.png" class>

<p>数组长度不是2的n次幂</p>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/42.png" class>

<blockquote>
<p>当然如果不考虑效率，直接求余，就不需要数组长度必须是2的n次方了</p>
</blockquote>
<blockquote>
<p>根据上面两张表，得出的小结：</p>
</blockquote>
<p>1、当我们根据key的hash确定其在数组的位置时，如果n是2的幂次方，可以保证数据的均匀插入，否则，可能数组的一些位置永远不会被插入数据，浪费数组的空间，加大hash冲突。</p>
<p>2、HashMap容量为2次幂的原因，就是为乐数据的均匀分布，减少hash冲突，<u>毕竟hash冲突越大，越代表数组中一个链的长度越大，这样的话会降低hashmap的性能。</u></p>
<blockquote>
<p><strong>==2、如果创建的数组长度不是2的n次幂，会怎么样？==</strong></p>
</blockquote>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/44.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/43.png" class>

<blockquote>
<p>如果给定的初始容量为10，具体的计算过程</p>
</blockquote>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/45.png" class>
<h5 id="a-transient-int-size"><a href="#a-transient-int-size" class="headerlink" title=":a: transient int size;"></a>:a: transient int size;</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//size表示HashMap中存放KV的数量（为链表和树中的KV的总和）。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>

<h5 id="b-int-threshold"><a href="#b-int-threshold" class="headerlink" title=":b: int threshold;"></a>:b: int threshold;</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">threshold表示当HashMap的size大于threshold时会执行resize操作。 </span><br><span class="line">threshold=capacity*loadFactor</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The next size value at which to resize (capacity * load           *factor).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure>

<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/57.png" class>

<h3 id="四、构造方法"><a href="#四、构造方法" class="headerlink" title="四、构造方法"></a>四、构造方法</h3><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/50.png" class>
<h5 id="1、HashMap"><a href="#1、HashMap" class="headerlink" title="1、HashMap()"></a>1、HashMap()</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/49.png" class>


<h5 id="2、HashMap-int"><a href="#2、HashMap-int" class="headerlink" title="2、HashMap(int)"></a>2、HashMap(int)</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/51.png" class>


<h5 id="3、HashMap-int-float"><a href="#3、HashMap-int-float" class="headerlink" title="3、HashMap(int, float)"></a>3、HashMap(int, float)</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/52.png" class>

<h5 id="4、HashMap-Map-lt-extends-K-extends-V-gt-m"><a href="#4、HashMap-Map-lt-extends-K-extends-V-gt-m" class="headerlink" title="4、HashMap(Map&lt;? extends K, ? extends V&gt; m)"></a>4、HashMap(Map&lt;? extends K, ? extends V&gt; m)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、成员方法"><a href="#五、成员方法" class="headerlink" title="五、成员方法"></a>五、成员方法</h3><h5 id="1、put（）"><a href="#1、put（）" class="headerlink" title="1、put（）"></a>1、put（）</h5><h5 id="2、get（）"><a href="#2、get（）" class="headerlink" title="2、get（）"></a>2、get（）</h5><h5 id="3、resize（）–扩容方法"><a href="#3、resize（）–扩容方法" class="headerlink" title="3、resize（）–扩容方法"></a>3、resize（）–扩容方法</h5><ul>
<li>什么时候扩容？</li>
</ul>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/55.png" class>

<ul>
<li>扩容原理</li>
</ul>
<p>扩容之后的索引位置要么是原来的索引位置，要么是原来索引位置+旧数组容量</p>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/56.png" class>

<h5 id="4、remove（）"><a href="#4、remove（）" class="headerlink" title="4、remove（）"></a>4、remove（）</h5><h5 id="5、treeifyBin（）"><a href="#5、treeifyBin（）" class="headerlink" title="5、treeifyBin（）"></a>5、treeifyBin（）</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/59.png" class>

<h3 id="六、如何设计HashMap的初始化容量最合理"><a href="#六、如何设计HashMap的初始化容量最合理" class="headerlink" title="六、如何设计HashMap的初始化容量最合理"></a>六、如何设计HashMap的初始化容量最合理</h3><ul>
<li>根据阿里开发手册<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/54.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/65.png" class>

</li>
</ul>
<h3 id="七、遍历集合的四种方式"><a href="#七、遍历集合的四种方式" class="headerlink" title="七、遍历集合的四种方式"></a>七、遍历集合的四种方式</h3><h5 id="1、分别遍历key和set"><a href="#1、分别遍历key和set" class="headerlink" title="1、分别遍历key和set"></a>1、分别遍历key和set</h5><h5 id="2、利用Iterator迭代器迭代"><a href="#2、利用Iterator迭代器迭代" class="headerlink" title="2、利用Iterator迭代器迭代"></a>2、利用Iterator迭代器迭代</h5><h5 id="3、通过get方法（不建议使用）"><a href="#3、通过get方法（不建议使用）" class="headerlink" title="3、通过get方法（不建议使用）"></a>3、通过get方法（不建议使用）</h5><h5 id="4、使用Map中的默认方法forEach"><a href="#4、使用Map中的默认方法forEach" class="headerlink" title="4、使用Map中的默认方法forEach"></a>4、使用Map中的默认方法forEach</h5><h3 id="视频截屏资料"><a href="#视频截屏资料" class="headerlink" title="视频截屏资料"></a>视频截屏资料</h3><p><a href="https://www.cnblogs.com/xawei/p/6747660.html" target="_blank" rel="noopener">https://www.cnblogs.com/xawei/p/6747660.html</a></p>
<h5 id="1、HashMap数据结构及存储过程讲解"><a href="#1、HashMap数据结构及存储过程讲解" class="headerlink" title="1、HashMap数据结构及存储过程讲解"></a>1、HashMap数据结构及存储过程讲解</h5><img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/39.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/61.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/62.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/63.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/64.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/65.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/66.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/67.png" class>
<img src="/2020/02/17/%E9%9B%86%E5%90%88%E4%B9%8BHashMap/68.png" class>
]]></content>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>初识docker</title>
    <url>/2020/01/14/%E5%88%9D%E8%AF%86docker/</url>
    <content><![CDATA[<h2 id="docker安装for-Mac"><a href="#docker安装for-Mac" class="headerlink" title="docker安装for Mac"></a>docker安装for Mac</h2><a id="more"></a>

<p>安装命令<br>brew cask install docker</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客の搭建</title>
    <url>/2019/12/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E3%81%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>基于hexo的个人博客搭建</p>
<a id="more"></a>

<p>hexo是nodejs生成的</p>
<h3 id="nodejs安装步骤"><a href="#nodejs安装步骤" class="headerlink" title="nodejs安装步骤"></a>nodejs安装步骤</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、安装nodejs命令--brew install nodejs</span><br><span class="line">(npm不需要单独安装。在安装<span class="keyword">Node</span><span class="title">的时候，会连带一起安装npm</span> 。npm全称为<span class="keyword">Node</span> <span class="title">Package</span> Manager，是一个基于<span class="keyword">Node</span>.<span class="title">js</span>的包管理器。)</span><br><span class="line"><span class="number">2</span>、更新到最新版本</span><br><span class="line"><span class="keyword">node</span><span class="title">附带的npm</span>可能不是最新版本，用下面的命令，更新到最新版本。</span><br><span class="line">npm install npm@latest -g</span><br><span class="line"><span class="number">3</span>、测试是否安装成功</span><br><span class="line">命令如下，出现版本提示表示安装成功:</span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">6.9</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="切换到root用户查看nodejs和npm版本"><a href="#切换到root用户查看nodejs和npm版本" class="headerlink" title="切换到root用户查看nodejs和npm版本"></a>切换到root用户查看nodejs和npm版本</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="切换到国内淘宝的镜像源速度快"><a href="#切换到国内淘宝的镜像源速度快" class="headerlink" title="切换到国内淘宝的镜像源速度快"></a>切换到国内淘宝的镜像源速度快</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h3><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">cnpm</span> <span class="variable">install</span> -<span class="variable">g</span> <span class="variable">hexo</span>-<span class="variable">cli</span></span><br><span class="line"><span class="variable">hexo</span> -<span class="function"><span class="title">v</span>(查看<span class="variable">hexo</span>版本)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> blog<span class="comment">//创建文件夹</span></span><br><span class="line"><span class="keyword">cd</span> blog</span><br><span class="line">sudo hexo init<span class="comment">//初始化博客</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"> Hexo is running <span class="keyword">at</span> <span class="keyword">http</span>://localhost:<span class="number">4000</span> . Press Ctrl+C <span class="built_in">to</span> <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="编辑博客"><a href="#编辑博客" class="headerlink" title="编辑博客"></a>编辑博客</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">n "我的第一篇博客文章"</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">我的第一篇博客文章.md</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="将博客部署到github上"><a href="#将博客部署到github上" class="headerlink" title="将博客部署到github上"></a>将博客部署到github上</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">、用户名部署个人博客的github仓库命名必须符合特定的要求才行</span></span><br><span class="line"><span class="number">2</span><span class="string">、安装git部署的插件</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">--save</span> <span class="string">hexo-deployer-git</span></span><br><span class="line"><span class="number">3</span><span class="string">、修改config.yml</span> <span class="string">文件</span></span><br><span class="line"><span class="string">vim</span> <span class="string">_config.yml</span> </span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/turborql/turborql.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">部署到远端hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
